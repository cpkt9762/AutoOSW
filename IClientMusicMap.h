class IClientMusicMap
{
	virtual void * BIsEnabled() = 0;
	virtual void Enable( bool ) = 0;
	virtual void EnableCrawlLogging( bool ) = 0;
	virtual void * BIsPlaying() = 0;
	virtual void * GetQueueCount() = 0;
	virtual void * GetCurrentQueueEntry() = 0;
	virtual void * GetQueueEntryURI( int32, char *, int32 ) = 0;
	virtual void * GetQueueEntryData( int32, char *, int32, char *, int32, char *, int32, int32 *, ETrackQueueOrigin *, int32 * ) = 0;
	virtual void * GetQueueEntryOrigin( int32, ETrackQueueOrigin *, int32 * ) = 0;
	virtual void EmptyQueue() = 0;
	virtual void RemoveQueueEntry( int32, bool ) = 0;
	virtual void AddArtistToQueue( char const*, bool, bool ) = 0;
	virtual void AddTracksOfAlbumIDToQueue( int32, int32, bool, char const*, bool, bool, bool ) = 0;
	virtual void AddAllTracksOfAlbumIDToQueue( int32, int32, bool, bool, bool ) = 0;
	virtual void AddTracksOfPlaylistIDToQueue( int32, int32, bool, bool, bool, bool ) = 0;
	virtual void SetSuppressAutoTrackAdvance( bool ) = 0;
	virtual void * GetPlaybackStatus() = 0;
	virtual void SetPlayingRepeatStatus( PlayingRepeat_Status ) = 0;
	virtual void * GetPlayingRepeatStatus() = 0;
	virtual void * TogglePlayingRepeatStatus() = 0;
	virtual void SetPlayingShuffled( bool ) = 0;
	virtual void * IsPlayingShuffled() = 0;
	virtual void Play() = 0;
	virtual void Pause() = 0;
	virtual void PlayPrevious() = 0;
	virtual void PlayNext() = 0;
	virtual void PlayEntry( int32 ) = 0;
	virtual void TogglePlayPause() = 0;
	virtual void SetVolume( float ) = 0;
	virtual void * GetVolume() = 0;
	virtual void ToggleMuteVolume() = 0;
	virtual void IncreaseVolume() = 0;
	virtual void DecreaseVolume() = 0;
	virtual void SetPlaybackPosition( int32 ) = 0;
	virtual void * GetPlaybackPosition() = 0;
	virtual void * GetPlaybackDuration() = 0;
	virtual void LocalLibraryCrawlTrack( char const* ) = 0;
	virtual void ResetLocalLibrary() = 0;
	virtual void * GetStatusLocalLibrary() = 0;
	virtual void SaveLocalLibraryDirectorySettings() = 0;
	virtual void * GetLocalLibraryDirectoryEntryCount() = 0;
	virtual void * GetLocalLibraryDirectoryEntry( int32, char *, int32 ) = 0;
	virtual void AddLocalLibraryDirectoryEntry( char const* ) = 0;
	virtual void ResetLocalLibraryDirectories( bool ) = 0;
	virtual void * GetDefaultLocalLibraryDirectory( char *, int32 ) = 0;
	virtual void LocalLibraryStopCrawling() = 0;
	virtual void UpdateLocalLibraryDirectoriesToCrawl() = 0;
	virtual void * BLocalLibraryIsCrawling() = 0;
	virtual void * GetLocalLibraryTrackCount() = 0;
	virtual void * GetLocalLibraryAlbumCount() = 0;
	virtual void * GetLocalLibraryAlbumID( int32, bool ) = 0;
	virtual void * GetLocalLibraryAlbumIDEntry( int32, char *, int32, char *, int32, int32 *, int32 *, bool * ) = 0;
	virtual void * GetLocalLibraryAlbumIDTrackEntry( int32, int32, char *, int32, int32 *, char *, int32, char *, int32 ) = 0;
	virtual void * GetLocalLibraryAlbumDirectoryForAlbumID( int32, char *, int32 ) = 0;
	virtual void * GetLocalLibraryAlbumSortNameForAlbumID( int32, char *, int32 ) = 0;
	virtual void * GetLocalLibraryArtistSortNameForAlbumID( int32, char *, int32 ) = 0;
	virtual void * GetLocalLibraryTrackCountForAlbumID( int32 ) = 0;
	virtual void * GetLocalLibraryAlbumIDTrackKey( int32, int32, char *, int32 ) = 0;
	virtual void * GetLocalLibraryAlbumIDForTrackKey( char const* ) = 0;
	virtual void * GetLocalLibraryArtistCount() = 0;
	virtual void * GetLocalLibraryArtistName( int32, char *, int32, char *, int32 ) = 0;
	virtual void * GetLocalLibraryAlbumCountForArtistName( char const* ) = 0;
	virtual void * GetLocalLibraryTrackAndAlbumCountOfArtistName( char const*, int32 *, int32 * ) = 0;
	virtual void * GetLocalLibraryAlbumIDForArtist( char const*, int32 ) = 0;
	virtual void * GetLocalLibraryRepresentativeAlbumIDForArtist( char const*, bool * ) = 0;
	virtual void * GetLocalLibraryTrackEntry( char const*, char *, int32, int32 *, char *, int32 ) = 0;
	virtual void * BRequestAllArtistListData( int32 ) = 0;
	virtual void * BRequestAllAlbumListData( int32 ) = 0;
	virtual void * BRequestAllTracksListDataForAlbumID( int32, int32 ) = 0;
	virtual void * GetPlaylistCount() = 0;
	virtual void * GetPlaylistID( int32 ) = 0;
	virtual void * GetPositionForPlaylistID( int32 ) = 0;
	virtual void * GetPlaylistIDForPosition( int32 ) = 0;
	virtual void * BRequestAllPlayListData( int32 ) = 0;
	virtual void * GetNextPlaylistName( char const*, char *, int32 ) = 0;
	virtual void * InsertPlaylistWithNameAtPosition( char const*, int32 ) = 0;
	virtual void * MovePlaylistFromPositionToPosition( int32, int32 ) = 0;
	virtual void * DeletePlaylistWithID( int32 ) = 0;
	virtual void * RenamePlaylistWithID( int32, char const* ) = 0;
	virtual void * AddRandomTracksToPlaylistID( int32, int32 ) = 0;
	virtual void * GetPlaylistIDData( int32, char *, int32, int32 *, int32 *, int32 *, int32 *, int32 * ) = 0;
	virtual void * GetPlaylistIDTrackCount( int32 ) = 0;
	virtual void * BRequestAllTracksListDataForPlaylistID( int32, int32 ) = 0;
	virtual void * GetPlaylistIDTrackKey( int32, int32, char *, int32, int32 * ) = 0;
	virtual void * GetPositionForPlaylistItemID( int32 ) = 0;
	virtual void * AddTrackKeyToPlaylistID( int32, char const* ) = 0;
	virtual void * AddAlbumIDToPlaylistID( int32, int32, char const* ) = 0;
	virtual void * AddArtistNameToPlaylistID( int32, char const* ) = 0;
	virtual void * AddPlaylistIDToPlaylistID( int32, int32 ) = 0;
	virtual void * RemovePlaylistPositionFromPlaylistID( int32, int32 ) = 0;
	virtual void * RemoveAllTracksFromPlaylistID( int32, bool ) = 0;
	virtual void * MoveTrackFromPositionToPositonInPlaylistID( int32, int32, int32 ) = 0;
	virtual void * AppendQueueToPlaylistID( int32, bool ) = 0;
	virtual void * GetLocalLibraryRepresentativeAlbumIDForPlaylist( int32, bool * ) = 0;
	virtual void * MarkTrackKeyAsPlayed( char const* ) = 0;
	virtual void * GetMostRecentlyPlayedAlbums( int32, int32 * ) = 0;
	virtual void * GetMostRecentlyAddedAlbums( int32, int32 * ) = 0;
	virtual void * ActivateRemotePlayerWithID( int32 ) = 0;
	virtual void * GetActiveRemotePlayerID() = 0;
	virtual void * GetRemotePlayerCount() = 0;
	virtual void * GetRemotePlayerIDAndName( int32, int32 *, char *, int32 ) = 0;
	virtual void * GetCurrentEntryTextForRemotePlayerWithID( int32, char *, int32 ) = 0;
	virtual void * RegisterSteamMusicRemote( char const* ) = 0;
	virtual void * DeregisterSteamMusicRemote() = 0;
	virtual void * BIsCurrentMusicRemote() = 0;
	virtual void * BActivationSuccess( bool ) = 0;
	virtual void * SetDisplayName( char const* ) = 0;
	virtual void * SetPNGIcon_64x64( void *, uint32 ) = 0;
	virtual void * EnablePlayPrevious( bool ) = 0;
	virtual void * EnablePlayNext( bool ) = 0;
	virtual void * EnableShuffled( bool ) = 0;
	virtual void * EnableLooped( bool ) = 0;
	virtual void * EnableQueue( bool ) = 0;
	virtual void * EnablePlaylists( bool ) = 0;
	virtual void * UpdatePlaybackStatus( AudioPlayback_Status ) = 0;
	virtual void * UpdateShuffled( bool ) = 0;
	virtual void * UpdateLooped( bool ) = 0;
	virtual void * UpdateVolume( float ) = 0;
	virtual void * CurrentEntryWillChange() = 0;
	virtual void * CurrentEntryIsAvailable( bool ) = 0;
	virtual void * UpdateCurrentEntryText( char const* ) = 0;
	virtual void * UpdateCurrentEntryElapsedSeconds( int32 ) = 0;
	virtual void * UpdateCurrentEntryCoverArt( void *, uint32 ) = 0;
	virtual void * CurrentEntryDidChange() = 0;
	virtual void * QueueWillChange() = 0;
	virtual void * ResetQueueEntries() = 0;
	virtual void * SetQueueEntry( int32, int32, char const* ) = 0;
	virtual void * SetCurrentQueueEntry( int32 ) = 0;
	virtual void * QueueDidChange() = 0;
	virtual void * PlaylistWillChange() = 0;
	virtual void * ResetPlaylistEntries() = 0;
	virtual void * SetPlaylistEntry( int32, int32, char const* ) = 0;
	virtual void * SetCurrentPlaylistEntry( int32 ) = 0;
	virtual void * PlaylistDidChange() = 0;
	virtual void * RequestAlbumCoverForAlbumID( int32 ) = 0;
	virtual void * RequestAlbumCoverForTrackKey( char const* ) = 0;
	virtual void * GetAlbumCoverForIndex( int32, void *, uint32 ) = 0;
	virtual void CancelAlbumCoverRequestForIndex( int32 ) = 0;
	virtual void * GetAlbumCoverURLForAlbumID( int32, char *, uint32 ) = 0;
	virtual void * GetAlbumCoverURLForTrackKey( char const*, char *, uint32 ) = 0;
	virtual void StartUsingSpotify() = 0;
	virtual void StopUsingSpotify() = 0;
	virtual void * GetStatusSpotify() = 0;
	virtual void LoginSpotify( char const*, char const* ) = 0;
	virtual void ReloginSpotify() = 0;
	virtual const char * GetCurrentUserSpotify() = 0;
	virtual void ForgetCurrentUserSpotify() = 0;
	virtual void LogoutSpotify() = 0;
	virtual void DumpStatusToConsole() = 0;
};

